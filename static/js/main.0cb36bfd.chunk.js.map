{"version":3,"sources":["components/TickLogic.ts","components/Ticker.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TickLogic","_periods","this","Date","d","period","find","x","paidThisPeriod","GetInterpolation","g","toGo","start","end","prevAmount","nextAmount","diff","timespan","Math","abs","getTime","fromStart","Ticker","useState","pctMyHouse","setHousePct","tl","useEffect","interval","setInterval","GetMyHousePercentage","clearInterval","formatter","Intl","NumberFormat","style","currency","toFixed","format","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6QAmFeA,E,WA9Eb,aAAe,yBAFPC,cAEM,EACZC,KAAKD,SAAW,CACd,CAAC,IAAIE,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,MAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SAEtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,QAAS,SACtD,CAAC,IAAIA,KAAK,KAAM,EAAG,GAAI,IA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","file":"static/js/main.0cb36bfd.chunk.js","sourcesContent":["// TickLogic.ts\r\n\r\nclass TickLogic {\r\n  private _periods: [Date, Date, number, number][];\r\n\r\n  constructor() {\r\n    this._periods = [\r\n      [new Date(2019, 9, 1), new Date(2020, 0, 1), 2360000, 2341388],\r\n      [new Date(2020, 0, 1), new Date(2020, 3, 1), 2341388, 2313295],\r\n      [new Date(2020, 3, 1), new Date(2020, 6, 1), 2313295, 2285202],\r\n      [new Date(2020, 6, 1), new Date(2020, 9, 1), 2285202, 2257109],\r\n      [new Date(2020, 9, 1), new Date(2021, 0, 1), 2257109, 2229016],\r\n      [new Date(2021, 0, 1), new Date(2021, 3, 1), 2229016, 2200923],\r\n      [new Date(2021, 3, 1), new Date(2021, 6, 1), 2200923, 2172830],\r\n      [new Date(2021, 6, 1), new Date(2021, 9, 1), 2172830, 2144737],\r\n\r\n      [new Date(2021, 9, 1), new Date(2022, 0, 1), 2200923, 2172830],\r\n      [new Date(2022, 0, 1), new Date(2022, 3, 1), 2172830, 2144737],\r\n      [new Date(2022, 3, 1), new Date(2022, 6, 1), 2144737, 2116644],\r\n      [new Date(2022, 6, 1), new Date(2022, 9, 1), 2116644, 2088551],\r\n      [new Date(2022, 9, 1), new Date(2023, 0, 1), 2088551, 2060457],\r\n      [new Date(2023, 0, 1), new Date(2023, 3, 1), 2060457, 2032364],\r\n      [new Date(2023, 3, 1), new Date(2023, 6, 1), 2032364, 2004271],\r\n      [new Date(2023, 6, 1), new Date(2023, 9, 1), 2004271, 1976178],\r\n      [new Date(2023, 9, 1), new Date(2024, 0, 1), 2257109, 2229016],\r\n      [new Date(2024, 0, 1), new Date(2024, 3, 1), 2341388, 2313295],\r\n      [new Date(2024, 3, 1), new Date(2024, 6, 1), 2313295, 2285202],\r\n      [new Date(2024, 6, 1), new Date(2024, 9, 1), 2285202, 2257109],\r\n      [new Date(2024, 9, 1), new Date(2025, 0, 1), 2257109, 2229016],\r\n      [new Date(2025, 0, 1), new Date(2025, 3, 1), 2341388, 2313295],\r\n      [new Date(2025, 3, 1), new Date(2025, 6, 1), 2313295, 2285202],\r\n      [new Date(2025, 6, 1), new Date(2025, 9, 1), 2285202, 2257109],\r\n      [new Date(2025, 9, 1), new Date(2026, 0, 1), 2257109, 2229016],\r\n      [new Date(2026, 0, 1), new Date(2026, 3, 1), 2341388, 2313295],\r\n      [new Date(2026, 3, 1), new Date(2026, 6, 1), 2313295, 2285202],\r\n      [new Date(2026, 6, 1), new Date(2026, 9, 1), 2285202, 2257109],\r\n      [new Date(2026, 9, 1), new Date(2027, 0, 1), 2257109, 2229016],\r\n      [new Date(2027, 0, 1), new Date(2027, 3, 1), 2341388, 2313295],\r\n      [new Date(2027, 3, 1), new Date(2027, 6, 1), 2313295, 2285202],\r\n      [new Date(2027, 6, 1), new Date(2027, 9, 1), 2285202, 2257109],\r\n      [new Date(2027, 9, 1), new Date(2028, 0, 1), 2257109, 2229016],\r\n      [new Date(2028, 0, 1), new Date(2028, 3, 1), 2341388, 2313295],\r\n      [new Date(2028, 3, 1), new Date(2028, 6, 1), 2313295, 2285202],\r\n      [new Date(2028, 6, 1), new Date(2028, 9, 1), 2285202, 2257109],\r\n      [new Date(2028, 9, 1), new Date(2029, 0, 1), 2257109, 2229016],\r\n      [new Date(2029, 0, 1), new Date(2029, 3, 1), 2341388, 2313295],\r\n      [new Date(2029, 3, 1), new Date(2029, 6, 1), 2313295, 2285202],\r\n      [new Date(2029, 6, 1), new Date(2029, 9, 1), 2285202, 2257109],\r\n      [new Date(2029, 9, 1), new Date(2030, 0, 1), 2257109, 2229016]\r\n    ];\r\n  }\r\n\r\n  GetMyHousePercentage(d: Date) {\r\n    let period = this._periods.find(x => x[0] < d && x[1] > d);\r\n    if (period) {\r\n      let g = this.GetInterpolation(period[0], period[1], period[2], period[3]);\r\n      let paidThisPeriod = g(d);\r\n      let toGo = period[2] - paidThisPeriod;\r\n      let housepct = (1 - toGo / 2360000) * 100;\r\n      return [housepct, toGo];\r\n    } else {\r\n      return [0, 0];\r\n    }\r\n  }\r\n\r\n  private GetInterpolation(\r\n    start: Date,\r\n    end: Date,\r\n    prevAmount: number,\r\n    nextAmount: number\r\n  ) {\r\n    let diff = prevAmount - nextAmount;\r\n    let timespan = Math.abs(end.getTime() - start.getTime());\r\n    let interpolator = (d: Date) => {\r\n      let fromStart = Math.abs(d.getTime() - start.getTime());\r\n      let percentage = fromStart / timespan;\r\n      let amount = diff * percentage;\r\n      return amount;\r\n    };\r\n    return interpolator;\r\n  }\r\n}\r\n\r\nexport default TickLogic;\r\n","// Ticker.tsx\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport TickLogic from \"./TickLogic\";\r\n\r\nconst Ticker: React.FC = () => {\r\n  const [pctMyHouse, setHousePct] = useState([0, 0]);\r\n\r\n  let tl = new TickLogic();\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setHousePct(() => tl.GetMyHousePercentage(new Date()));\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  var formatter = new Intl.NumberFormat(\"da-DK\", {\r\n    style: \"currency\",\r\n    currency: \"DKK\"\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      Vi ejer {pctMyHouse[0].toFixed(9)} % af huset. <br></br>Vi skylder{\" \"}\r\n      {formatter.format(pctMyHouse[1])}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ticker;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Ticker from \"./components/Ticker\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Ticker />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}